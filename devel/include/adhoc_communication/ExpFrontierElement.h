// Generated by gencpp from file adhoc_communication/ExpFrontierElement.msg
// DO NOT EDIT!


#ifndef ADHOC_COMMUNICATION_MESSAGE_EXPFRONTIERELEMENT_H
#define ADHOC_COMMUNICATION_MESSAGE_EXPFRONTIERELEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace adhoc_communication
{
template <class ContainerAllocator>
struct ExpFrontierElement_
{
  typedef ExpFrontierElement_<ContainerAllocator> Type;

  ExpFrontierElement_()
    : id(0)
    , detected_by_robot_str()
    , detected_by_robot(0)
    , robot_home_position_x(0.0)
    , robot_home_position_y(0.0)
    , x_coordinate(0.0)
    , y_coordinate(0.0)  {
    }
  ExpFrontierElement_(const ContainerAllocator& _alloc)
    : id(0)
    , detected_by_robot_str(_alloc)
    , detected_by_robot(0)
    , robot_home_position_x(0.0)
    , robot_home_position_y(0.0)
    , x_coordinate(0.0)
    , y_coordinate(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detected_by_robot_str_type;
  _detected_by_robot_str_type detected_by_robot_str;

   typedef int64_t _detected_by_robot_type;
  _detected_by_robot_type detected_by_robot;

   typedef double _robot_home_position_x_type;
  _robot_home_position_x_type robot_home_position_x;

   typedef double _robot_home_position_y_type;
  _robot_home_position_y_type robot_home_position_y;

   typedef double _x_coordinate_type;
  _x_coordinate_type x_coordinate;

   typedef double _y_coordinate_type;
  _y_coordinate_type y_coordinate;




  typedef boost::shared_ptr< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> const> ConstPtr;

}; // struct ExpFrontierElement_

typedef ::adhoc_communication::ExpFrontierElement_<std::allocator<void> > ExpFrontierElement;

typedef boost::shared_ptr< ::adhoc_communication::ExpFrontierElement > ExpFrontierElementPtr;
typedef boost::shared_ptr< ::adhoc_communication::ExpFrontierElement const> ExpFrontierElementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace adhoc_communication

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'adhoc_communication': ['/home/ros/slampbenchmarking/src/aau_multi_robot/adhoc_communication/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a783300e6ed76ebb52feb001fc044546";
  }

  static const char* value(const ::adhoc_communication::ExpFrontierElement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa783300e6ed76ebbULL;
  static const uint64_t static_value2 = 0x52feb001fc044546ULL;
};

template<class ContainerAllocator>
struct DataType< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adhoc_communication/ExpFrontierElement";
  }

  static const char* value(const ::adhoc_communication::ExpFrontierElement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id\n\
string detected_by_robot_str\n\
int64 detected_by_robot\n\
float64 robot_home_position_x\n\
float64 robot_home_position_y\n\
float64 x_coordinate\n\
float64 y_coordinate\n\
";
  }

  static const char* value(const ::adhoc_communication::ExpFrontierElement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.detected_by_robot_str);
      stream.next(m.detected_by_robot);
      stream.next(m.robot_home_position_x);
      stream.next(m.robot_home_position_y);
      stream.next(m.x_coordinate);
      stream.next(m.y_coordinate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExpFrontierElement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::adhoc_communication::ExpFrontierElement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::adhoc_communication::ExpFrontierElement_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "detected_by_robot_str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detected_by_robot_str);
    s << indent << "detected_by_robot: ";
    Printer<int64_t>::stream(s, indent + "  ", v.detected_by_robot);
    s << indent << "robot_home_position_x: ";
    Printer<double>::stream(s, indent + "  ", v.robot_home_position_x);
    s << indent << "robot_home_position_y: ";
    Printer<double>::stream(s, indent + "  ", v.robot_home_position_y);
    s << indent << "x_coordinate: ";
    Printer<double>::stream(s, indent + "  ", v.x_coordinate);
    s << indent << "y_coordinate: ";
    Printer<double>::stream(s, indent + "  ", v.y_coordinate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ADHOC_COMMUNICATION_MESSAGE_EXPFRONTIERELEMENT_H
