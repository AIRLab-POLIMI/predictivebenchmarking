// Generated by gencpp from file adhoc_communication/CMgrRobotUpdate.msg
// DO NOT EDIT!


#ifndef ADHOC_COMMUNICATION_MESSAGE_CMGRROBOTUPDATE_H
#define ADHOC_COMMUNICATION_MESSAGE_CMGRROBOTUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <adhoc_communication/CMgrDimensions.h>

namespace adhoc_communication
{
template <class ContainerAllocator>
struct CMgrRobotUpdate_
{
  typedef CMgrRobotUpdate_<ContainerAllocator> Type;

  CMgrRobotUpdate_()
    : robot_name()
    , capabilities()
    , energy(0.0)
    , dimensions()
    , status()
    , neighbors()  {
    }
  CMgrRobotUpdate_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , capabilities(_alloc)
    , energy(0.0)
    , dimensions(_alloc)
    , status(_alloc)
    , neighbors(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _capabilities_type;
  _capabilities_type capabilities;

   typedef float _energy_type;
  _energy_type energy;

   typedef  ::adhoc_communication::CMgrDimensions_<ContainerAllocator>  _dimensions_type;
  _dimensions_type dimensions;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _neighbors_type;
  _neighbors_type neighbors;




  typedef boost::shared_ptr< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct CMgrRobotUpdate_

typedef ::adhoc_communication::CMgrRobotUpdate_<std::allocator<void> > CMgrRobotUpdate;

typedef boost::shared_ptr< ::adhoc_communication::CMgrRobotUpdate > CMgrRobotUpdatePtr;
typedef boost::shared_ptr< ::adhoc_communication::CMgrRobotUpdate const> CMgrRobotUpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace adhoc_communication

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'adhoc_communication': ['/home/valerio/slampbenchmarking/src/aau_multi_robot/adhoc_communication/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "624d872396e6c4effefdaa51af9e8904";
  }

  static const char* value(const ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x624d872396e6c4efULL;
  static const uint64_t static_value2 = 0xfefdaa51af9e8904ULL;
};

template<class ContainerAllocator>
struct DataType< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adhoc_communication/CMgrRobotUpdate";
  }

  static const char* value(const ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name\n\
string capabilities\n\
float32 energy\n\
adhoc_communication/CMgrDimensions dimensions\n\
string status\n\
string[] neighbors\n\
\n\
================================================================================\n\
MSG: adhoc_communication/CMgrDimensions\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.capabilities);
      stream.next(m.energy);
      stream.next(m.dimensions);
      stream.next(m.status);
      stream.next(m.neighbors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CMgrRobotUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::adhoc_communication::CMgrRobotUpdate_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "capabilities: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.capabilities);
    s << indent << "energy: ";
    Printer<float>::stream(s, indent + "  ", v.energy);
    s << indent << "dimensions: ";
    s << std::endl;
    Printer< ::adhoc_communication::CMgrDimensions_<ContainerAllocator> >::stream(s, indent + "  ", v.dimensions);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "neighbors[]" << std::endl;
    for (size_t i = 0; i < v.neighbors.size(); ++i)
    {
      s << indent << "  neighbors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.neighbors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ADHOC_COMMUNICATION_MESSAGE_CMGRROBOTUPDATE_H
