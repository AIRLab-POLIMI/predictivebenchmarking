;; Auto-generated. Do not edit!


(when (boundp 'nav2d_navigator::MoveToPosition2DGoal)
  (if (not (find-package "NAV2D_NAVIGATOR"))
    (make-package "NAV2D_NAVIGATOR"))
  (shadow 'MoveToPosition2DGoal (find-package "NAV2D_NAVIGATOR")))
(unless (find-package "NAV2D_NAVIGATOR::MOVETOPOSITION2DGOAL")
  (make-package "NAV2D_NAVIGATOR::MOVETOPOSITION2DGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveToPosition2DGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass nav2d_navigator::MoveToPosition2DGoal
  :super ros::object
  :slots (_header _target_pose _target_distance _target_angle ))

(defmethod nav2d_navigator::MoveToPosition2DGoal
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:target_pose __target_pose) (instance geometry_msgs::Pose2D :init))
    ((:target_distance __target_distance) 0.0)
    ((:target_angle __target_angle) 0.0)
    )
   (send-super :init)
   (setq _header __header)
   (setq _target_pose __target_pose)
   (setq _target_distance (float __target_distance))
   (setq _target_angle (float __target_angle))
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:target_pose
   (&rest __target_pose)
   (if (keywordp (car __target_pose))
       (send* _target_pose __target_pose)
     (progn
       (if __target_pose (setq _target_pose (car __target_pose)))
       _target_pose)))
  (:target_distance
   (&optional __target_distance)
   (if __target_distance (setq _target_distance __target_distance)) _target_distance)
  (:target_angle
   (&optional __target_angle)
   (if __target_angle (setq _target_angle __target_angle)) _target_angle)
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; geometry_msgs/Pose2D _target_pose
    (send _target_pose :serialization-length)
    ;; float32 _target_distance
    4
    ;; float32 _target_angle
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; geometry_msgs/Pose2D _target_pose
       (send _target_pose :serialize s)
     ;; float32 _target_distance
       (sys::poke _target_distance (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _target_angle
       (sys::poke _target_angle (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; geometry_msgs/Pose2D _target_pose
     (send _target_pose :deserialize buf ptr-) (incf ptr- (send _target_pose :serialization-length))
   ;; float32 _target_distance
     (setq _target_distance (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _target_angle
     (setq _target_angle (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get nav2d_navigator::MoveToPosition2DGoal :md5sum-) "471d15abce131270d05238fa2475ae64")
(setf (get nav2d_navigator::MoveToPosition2DGoal :datatype-) "nav2d_navigator/MoveToPosition2DGoal")
(setf (get nav2d_navigator::MoveToPosition2DGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
std_msgs/Header header
geometry_msgs/Pose2D target_pose
float32 target_distance
float32 target_angle

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
")



(provide :nav2d_navigator/MoveToPosition2DGoal "471d15abce131270d05238fa2475ae64")


