// Generated by gencpp from file explorer/DistanceResponse.msg
// DO NOT EDIT!


#ifndef EXPLORER_MESSAGE_DISTANCERESPONSE_H
#define EXPLORER_MESSAGE_DISTANCERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace explorer
{
template <class ContainerAllocator>
struct DistanceResponse_
{
  typedef DistanceResponse_<ContainerAllocator> Type;

  DistanceResponse_()
    : status(0)
    , distance(0.0)  {
    }
  DistanceResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef float _distance_type;
  _distance_type distance;




  typedef boost::shared_ptr< ::explorer::DistanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::explorer::DistanceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DistanceResponse_

typedef ::explorer::DistanceResponse_<std::allocator<void> > DistanceResponse;

typedef boost::shared_ptr< ::explorer::DistanceResponse > DistanceResponsePtr;
typedef boost::shared_ptr< ::explorer::DistanceResponse const> DistanceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::explorer::DistanceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::explorer::DistanceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace explorer

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'explorer': ['/home/valerio/slampbenchmarking/src/aau_multi_robot/explorer/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::explorer::DistanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::explorer::DistanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::explorer::DistanceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::explorer::DistanceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::explorer::DistanceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::explorer::DistanceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::explorer::DistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e08eacaf6f8ccdb656226de405e5eb96";
  }

  static const char* value(const ::explorer::DistanceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe08eacaf6f8ccdb6ULL;
  static const uint64_t static_value2 = 0x56226de405e5eb96ULL;
};

template<class ContainerAllocator>
struct DataType< ::explorer::DistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "explorer/DistanceResponse";
  }

  static const char* value(const ::explorer::DistanceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::explorer::DistanceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n\
float32 distance\n\
\n\
";
  }

  static const char* value(const ::explorer::DistanceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::explorer::DistanceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DistanceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::explorer::DistanceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::explorer::DistanceResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPLORER_MESSAGE_DISTANCERESPONSE_H
