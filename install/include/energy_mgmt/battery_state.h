// Generated by gencpp from file energy_mgmt/battery_state.msg
// DO NOT EDIT!


#ifndef ENERGY_MGMT_MESSAGE_BATTERY_STATE_H
#define ENERGY_MGMT_MESSAGE_BATTERY_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace energy_mgmt
{
template <class ContainerAllocator>
struct battery_state_
{
  typedef battery_state_<ContainerAllocator> Type;

  battery_state_()
    : charging(false)
    , soc(0.0)
    , remaining_time_charge(0.0)
    , remaining_time_run(0.0)
    , remaining_distance(0.0)  {
    }
  battery_state_(const ContainerAllocator& _alloc)
    : charging(false)
    , soc(0.0)
    , remaining_time_charge(0.0)
    , remaining_time_run(0.0)
    , remaining_distance(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _charging_type;
  _charging_type charging;

   typedef float _soc_type;
  _soc_type soc;

   typedef float _remaining_time_charge_type;
  _remaining_time_charge_type remaining_time_charge;

   typedef float _remaining_time_run_type;
  _remaining_time_run_type remaining_time_run;

   typedef float _remaining_distance_type;
  _remaining_distance_type remaining_distance;




  typedef boost::shared_ptr< ::energy_mgmt::battery_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::energy_mgmt::battery_state_<ContainerAllocator> const> ConstPtr;

}; // struct battery_state_

typedef ::energy_mgmt::battery_state_<std::allocator<void> > battery_state;

typedef boost::shared_ptr< ::energy_mgmt::battery_state > battery_statePtr;
typedef boost::shared_ptr< ::energy_mgmt::battery_state const> battery_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::energy_mgmt::battery_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::energy_mgmt::battery_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace energy_mgmt

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'energy_mgmt': ['/home/valerio/slampbenchmarking/src/aau_multi_robot/energy_mgmt/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::energy_mgmt::battery_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::energy_mgmt::battery_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::energy_mgmt::battery_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::energy_mgmt::battery_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::energy_mgmt::battery_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::energy_mgmt::battery_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::energy_mgmt::battery_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae34ca1536c302c535b231631ea2d4bc";
  }

  static const char* value(const ::energy_mgmt::battery_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae34ca1536c302c5ULL;
  static const uint64_t static_value2 = 0x35b231631ea2d4bcULL;
};

template<class ContainerAllocator>
struct DataType< ::energy_mgmt::battery_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "energy_mgmt/battery_state";
  }

  static const char* value(const ::energy_mgmt::battery_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::energy_mgmt::battery_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool charging\n\
float32 soc\n\
float32 remaining_time_charge\n\
float32 remaining_time_run\n\
float32 remaining_distance\n\
";
  }

  static const char* value(const ::energy_mgmt::battery_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::energy_mgmt::battery_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charging);
      stream.next(m.soc);
      stream.next(m.remaining_time_charge);
      stream.next(m.remaining_time_run);
      stream.next(m.remaining_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct battery_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::energy_mgmt::battery_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::energy_mgmt::battery_state_<ContainerAllocator>& v)
  {
    s << indent << "charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charging);
    s << indent << "soc: ";
    Printer<float>::stream(s, indent + "  ", v.soc);
    s << indent << "remaining_time_charge: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_time_charge);
    s << indent << "remaining_time_run: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_time_run);
    s << indent << "remaining_distance: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ENERGY_MGMT_MESSAGE_BATTERY_STATE_H
