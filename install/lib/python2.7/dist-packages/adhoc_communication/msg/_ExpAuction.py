# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from adhoc_communication/ExpAuction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import adhoc_communication.msg

class ExpAuction(genpy.Message):
  _md5sum = "99f1253490d52d5e7eb6095beeea2711"
  _type = "adhoc_communication/ExpAuction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool auction_status_message
bool start_auction
bool auction_finished
ExpAuctionElement[] occupied_ids
ExpCluster[] requested_clusters
uint32 auction_id
string robot_name
ExpCluster[] available_clusters

================================================================================
MSG: adhoc_communication/ExpAuctionElement
int64 id
string detected_by_robot_str

================================================================================
MSG: adhoc_communication/ExpCluster
ExpClusterElement[] ids_contained
float64 bid 

================================================================================
MSG: adhoc_communication/ExpClusterElement
int64 id
string detected_by_robot_str
"""
  __slots__ = ['auction_status_message','start_auction','auction_finished','occupied_ids','requested_clusters','auction_id','robot_name','available_clusters']
  _slot_types = ['bool','bool','bool','adhoc_communication/ExpAuctionElement[]','adhoc_communication/ExpCluster[]','uint32','string','adhoc_communication/ExpCluster[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       auction_status_message,start_auction,auction_finished,occupied_ids,requested_clusters,auction_id,robot_name,available_clusters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExpAuction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.auction_status_message is None:
        self.auction_status_message = False
      if self.start_auction is None:
        self.start_auction = False
      if self.auction_finished is None:
        self.auction_finished = False
      if self.occupied_ids is None:
        self.occupied_ids = []
      if self.requested_clusters is None:
        self.requested_clusters = []
      if self.auction_id is None:
        self.auction_id = 0
      if self.robot_name is None:
        self.robot_name = ''
      if self.available_clusters is None:
        self.available_clusters = []
    else:
      self.auction_status_message = False
      self.start_auction = False
      self.auction_finished = False
      self.occupied_ids = []
      self.requested_clusters = []
      self.auction_id = 0
      self.robot_name = ''
      self.available_clusters = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.auction_status_message, _x.start_auction, _x.auction_finished))
      length = len(self.occupied_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.occupied_ids:
        buff.write(_get_struct_q().pack(val1.id))
        _x = val1.detected_by_robot_str
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.requested_clusters)
      buff.write(_struct_I.pack(length))
      for val1 in self.requested_clusters:
        length = len(val1.ids_contained)
        buff.write(_struct_I.pack(length))
        for val2 in val1.ids_contained:
          buff.write(_get_struct_q().pack(val2.id))
          _x = val2.detected_by_robot_str
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.bid))
      buff.write(_get_struct_I().pack(self.auction_id))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.available_clusters)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_clusters:
        length = len(val1.ids_contained)
        buff.write(_struct_I.pack(length))
        for val2 in val1.ids_contained:
          buff.write(_get_struct_q().pack(val2.id))
          _x = val2.detected_by_robot_str
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.bid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.occupied_ids is None:
        self.occupied_ids = None
      if self.requested_clusters is None:
        self.requested_clusters = None
      if self.available_clusters is None:
        self.available_clusters = None
      end = 0
      _x = self
      start = end
      end += 3
      (_x.auction_status_message, _x.start_auction, _x.auction_finished,) = _get_struct_3B().unpack(str[start:end])
      self.auction_status_message = bool(self.auction_status_message)
      self.start_auction = bool(self.start_auction)
      self.auction_finished = bool(self.auction_finished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.occupied_ids = []
      for i in range(0, length):
        val1 = adhoc_communication.msg.ExpAuctionElement()
        start = end
        end += 8
        (val1.id,) = _get_struct_q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.detected_by_robot_str = str[start:end].decode('utf-8')
        else:
          val1.detected_by_robot_str = str[start:end]
        self.occupied_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.requested_clusters = []
      for i in range(0, length):
        val1 = adhoc_communication.msg.ExpCluster()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.ids_contained = []
        for i in range(0, length):
          val2 = adhoc_communication.msg.ExpClusterElement()
          start = end
          end += 8
          (val2.id,) = _get_struct_q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.detected_by_robot_str = str[start:end].decode('utf-8')
          else:
            val2.detected_by_robot_str = str[start:end]
          val1.ids_contained.append(val2)
        start = end
        end += 8
        (val1.bid,) = _get_struct_d().unpack(str[start:end])
        self.requested_clusters.append(val1)
      start = end
      end += 4
      (self.auction_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_clusters = []
      for i in range(0, length):
        val1 = adhoc_communication.msg.ExpCluster()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.ids_contained = []
        for i in range(0, length):
          val2 = adhoc_communication.msg.ExpClusterElement()
          start = end
          end += 8
          (val2.id,) = _get_struct_q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.detected_by_robot_str = str[start:end].decode('utf-8')
          else:
            val2.detected_by_robot_str = str[start:end]
          val1.ids_contained.append(val2)
        start = end
        end += 8
        (val1.bid,) = _get_struct_d().unpack(str[start:end])
        self.available_clusters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B().pack(_x.auction_status_message, _x.start_auction, _x.auction_finished))
      length = len(self.occupied_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.occupied_ids:
        buff.write(_get_struct_q().pack(val1.id))
        _x = val1.detected_by_robot_str
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.requested_clusters)
      buff.write(_struct_I.pack(length))
      for val1 in self.requested_clusters:
        length = len(val1.ids_contained)
        buff.write(_struct_I.pack(length))
        for val2 in val1.ids_contained:
          buff.write(_get_struct_q().pack(val2.id))
          _x = val2.detected_by_robot_str
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.bid))
      buff.write(_get_struct_I().pack(self.auction_id))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.available_clusters)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_clusters:
        length = len(val1.ids_contained)
        buff.write(_struct_I.pack(length))
        for val2 in val1.ids_contained:
          buff.write(_get_struct_q().pack(val2.id))
          _x = val2.detected_by_robot_str
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.bid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.occupied_ids is None:
        self.occupied_ids = None
      if self.requested_clusters is None:
        self.requested_clusters = None
      if self.available_clusters is None:
        self.available_clusters = None
      end = 0
      _x = self
      start = end
      end += 3
      (_x.auction_status_message, _x.start_auction, _x.auction_finished,) = _get_struct_3B().unpack(str[start:end])
      self.auction_status_message = bool(self.auction_status_message)
      self.start_auction = bool(self.start_auction)
      self.auction_finished = bool(self.auction_finished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.occupied_ids = []
      for i in range(0, length):
        val1 = adhoc_communication.msg.ExpAuctionElement()
        start = end
        end += 8
        (val1.id,) = _get_struct_q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.detected_by_robot_str = str[start:end].decode('utf-8')
        else:
          val1.detected_by_robot_str = str[start:end]
        self.occupied_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.requested_clusters = []
      for i in range(0, length):
        val1 = adhoc_communication.msg.ExpCluster()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.ids_contained = []
        for i in range(0, length):
          val2 = adhoc_communication.msg.ExpClusterElement()
          start = end
          end += 8
          (val2.id,) = _get_struct_q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.detected_by_robot_str = str[start:end].decode('utf-8')
          else:
            val2.detected_by_robot_str = str[start:end]
          val1.ids_contained.append(val2)
        start = end
        end += 8
        (val1.bid,) = _get_struct_d().unpack(str[start:end])
        self.requested_clusters.append(val1)
      start = end
      end += 4
      (self.auction_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_clusters = []
      for i in range(0, length):
        val1 = adhoc_communication.msg.ExpCluster()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.ids_contained = []
        for i in range(0, length):
          val2 = adhoc_communication.msg.ExpClusterElement()
          start = end
          end += 8
          (val2.id,) = _get_struct_q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.detected_by_robot_str = str[start:end].decode('utf-8')
          else:
            val2.detected_by_robot_str = str[start:end]
          val1.ids_contained.append(val2)
        start = end
        end += 8
        (val1.bid,) = _get_struct_d().unpack(str[start:end])
        self.available_clusters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
